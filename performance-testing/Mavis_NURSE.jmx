<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Mavis_NURSE - 2.1">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Not(A:Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;133&quot;, &quot;Chromium&quot;;v=&quot;133&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
          </elementProp>
          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Basic ${AuthToken}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SessionId" elementType="Argument">
            <stringProp name="Argument.name">SessionId</stringProp>
            <stringProp name="Argument.value">${__P(SessionSlug, Null)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReadOnlyMode" elementType="Argument">
            <stringProp name="Argument.name">ReadOnlyMode</stringProp>
            <stringProp name="Argument.value">${__P(ReadOnlyMode,False)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loops" elementType="Argument">
            <stringProp name="Argument.name">Loops</stringProp>
            <stringProp name="Argument.value">${__P(Loops, -1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">${__P(Threads, 70)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="VaccinationLoop" elementType="Argument">
            <stringProp name="Argument.name">VaccinationLoop</stringProp>
            <stringProp name="Argument.value">${__P(VaccinationLoop, 20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RampUp" elementType="Argument">
            <stringProp name="Argument.name">RampUp</stringProp>
            <stringProp name="Argument.value">${__P(RampUp, 900)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration, 3600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthToken" elementType="Argument">
            <stringProp name="Argument.name">AuthToken</stringProp>
            <stringProp name="Argument.value">${__P(AuthToken, Null)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.domain">qa.mavistesting.com</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <collectionProp name="DNSCacheManager.hosts"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Test SessionId Is Not NULL" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">if(vars.get(&quot;SessionId&quot;) == &quot;Null&quot;)
{
    log.info(&quot;Variable SessionId is not defined!&quot;);
    ctx.getEngine().stopTest();
} else if(vars.get(&quot;AuthToken&quot;) == &quot;Null&quot;)
{
    log.info(&quot;Variable AuthToken is not defined!&quot;);
    ctx.getEngine().stopTest();
}

log.info(&quot;**** Loops: &quot; + vars.get(&quot;Loops&quot;));
log.info(&quot;**** Threads: &quot; + vars.get(&quot;Threads&quot;));</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RampUp}</stringProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">${Loops}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Homepage">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/start" enabled="true">
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">start</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Sign In Page">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/users/sign-in" enabled="true">
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">users/sign-in</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
              <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 3-5s" enabled="true">
              <stringProp name="ConstantTimer.delay">${__Random(3000,5000,)}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/users/sign-in" enabled="true">
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">users/sign-in</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="user[email]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">user[email]</stringProp>
                  <stringProp name="Argument.value">nurse.jackie@example.org</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="user[password]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">user[password]</stringProp>
                  <stringProp name="Argument.value">nurse.jackie@example.org</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="authenticity_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">authenticity_token</stringProp>
                  <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">&lt;form action=&quot;/users/organisations&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
              <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 20-35s" enabled="true">
              <stringProp name="ConstantTimer.delay">${__Random(20000,35000,)}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Select Organisations">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/users/organisations" enabled="true">
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">users/organisations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="organisation_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">organisation_id</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="authenticity_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">authenticity_token</stringProp>
                  <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 3-5s" enabled="true">
              <stringProp name="ConstantTimer.delay">${__Random(3000,5000,)}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Open Sessions List">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions" enabled="true">
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">sessions</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SessionId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-12s" enabled="true">
              <stringProp name="ConstantTimer.delay">${__Random(7000,12000,)}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ReadOnlyMode == True">
          <stringProp name="IfController.condition">${__jexl3(&quot;${ReadOnlyMode}&quot; == &quot;True&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Open Session" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}" enabled="true">
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">sessions/${SessionId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1808875778">vaccinations given for HPV</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/consent" enabled="true">
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">sessions/${SessionId}/consent</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1565242083">Showing &lt;b&gt;1&lt;/b&gt; to &lt;b&gt;50&lt;/b&gt; of</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/triage" enabled="true">
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">sessions/${SessionId}/triage</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1565242083">Showing &lt;b&gt;1&lt;/b&gt; to &lt;b&gt;50&lt;/b&gt; of</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/register" enabled="true">
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">sessions/${SessionId}/register</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-219785640">You can register attendance when a session is in progress.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/record" enabled="true">
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">sessions/${SessionId}/record</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="970611725">You can record vaccinations when a session is in progress</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/outcome" enabled="true">
              <stringProp name="HTTPSampler.port">0</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">sessions/${SessionId}/outcome</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SessionId Regular Expression Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionId</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;a class=&quot;nhsuk-link&quot; href=&quot;/sessions/(\w+)[\S\s]+Cohort&lt;/span&gt;\s+[1-9]+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SessionId_NotFound</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="LogOut_Authenticity_Token Boundary Extractor" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">LogOut_Authenticity_Token</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/logout&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;delete&quot; autocomplete=&quot;off&quot; /&gt;&lt;button class=&quot;app-header__account-button&quot; type=&quot;submit&quot;&gt;Log out&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                <stringProp name="BoundaryExtractor.default">LogOut_Authenticity_Token_NotFound</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">1</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1565242083">Showing &lt;b&gt;1&lt;/b&gt; to &lt;b&gt;50&lt;/b&gt; of</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ReadOnlyMode == False">
          <stringProp name="IfController.condition">${__jexl3(&quot;${ReadOnlyMode}&quot; == &quot;False&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Vaccination Loops">
            <stringProp name="LoopController.loops">${VaccinationLoop}</stringProp>
          </LoopController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="RegisterAttendance" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 10-15s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(10000,15000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/register" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}/register</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 3-5s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(3000,5000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/register?search_form%5Bq%5D=&amp;search_form%5Bregister_status%5D=unknown&amp;search_form%5Byear_groups%5D%5B%5D=&amp;search_form%5Bdate_of_birth_day%5D=&amp;search_form%5Bdate_of_birth_month%5D=&amp;search_form%5Bdate_of_birth_year%5D=&amp;search_form%5Bmissing_nhs_number%5D=0" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}/register?search_form%5Bq%5D=&amp;search_form%5Bregister_status%5D=unknown&amp;search_form%5Byear_groups%5D%5B%5D=&amp;search_form%5Bdate_of_birth_day%5D=&amp;search_form%5Bdate_of_birth_month%5D=&amp;search_form%5Bdate_of_birth_year%5D=&amp;search_form%5Bmissing_nhs_number%5D=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 2-3s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(2000,3000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PageNumber Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">PageNumber</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a href=&quot;/sessions/\w+/register\?[a-z_%0-9A-Z=|&amp;;]*?&amp;amp;page=(\d+)&quot; class=&quot;govuk-link govuk-pagination__link&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">PageNumber_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get Random Page" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">Random r = new Random(System.currentTimeMillis());

int matchNr = Integer.parseInt(vars.get(&quot;PageNumber_matchNr&quot;));

log.info(vars.get(&quot;PageNumber_&quot; + matchNr + &quot;_g1&quot;));

int rand = r.nextInt(Integer.parseInt(vars.get(&quot;PageNumber_&quot; + matchNr + &quot;_g1&quot;))) + 1;

log.info(&quot;&quot; + rand)

vars.put(&quot;RandomPage&quot;, String.valueOf(rand));

</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/register?search_form%5Bq%5D=&amp;search_form%5Bregister_status%5D=unknown&amp;search_form%5Byear_groups%5D%5B%5D=&amp;search_form%5Bdate_of_birth_day%5D=&amp;search_form%5Bdate_of_birth_month%5D=&amp;search_form%5Bdate_of_birth_year%5D=&amp;search_form%5Bmissing_nhs_number%5D=0" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}/register?search_form%5Bq%5D=&amp;search_form%5Bregister_status%5D=unknown&amp;search_form%5Byear_groups%5D%5B%5D=&amp;search_form%5Bdate_of_birth_day%5D=&amp;search_form%5Bdate_of_birth_month%5D=&amp;search_form%5Bdate_of_birth_year%5D=&amp;search_form%5Bmissing_nhs_number%5D=0&amp;page=${RandomPage}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 10-15s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(10000,15000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PatientInfo Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">PatientInfo</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;strong class=&quot;nhsuk-tag nhsuk-tag--(?:grey|blue)&quot;&gt;(?:Not registered yet|Attending session)&lt;/strong&gt;&lt;/dd&gt;&lt;/div&gt;&lt;/dl&gt;\s+&lt;div class=&quot;app-button-group&quot;&gt;\s+&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/sessions/\w+/register/(\d+)/present\?[a-z_%0-9A-Z=|&amp;;]*?&quot;&gt;&lt;button class=&quot;nhsuk-button app-button--secondary app-button--small&quot; data-module=&quot;nhsuk-button&quot; new_tab=&quot;false&quot; type=&quot;submit&quot;&gt;Attending&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">PatientInfo_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get Random Patient" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">Random r = new Random(System.currentTimeMillis());

int rand = r.nextInt(Integer.parseInt(vars.get(&quot;PatientInfo_matchNr&quot;))) + 1;

vars.put(&quot;PatientId&quot;, vars.get(&quot;PatientInfo_&quot; + rand + &quot;_g1&quot;));
vars.put(&quot;Authenticity_Token&quot;, vars.get(&quot;PatientInfo_&quot; + rand + &quot;_g2&quot;));
vars.put(&quot;RandomNumber&quot;, String.valueOf(rand));

try 
{
	FileWriter fw = new FileWriter(&quot;test.log&quot;, true);
	fw.write(&quot;${PatientInfo_matchNr},&quot; + vars.get(&quot;PatientId&quot;) + &quot;,&quot; + vars.get(&quot;Authenticity_Token&quot;) +&quot;,&quot;+ vars.get(&quot;RandomNumber&quot;) +&quot;\n&quot;);
	fw.flush();
	fw.close();
} 
catch (IOException e)
{
    throw new RuntimeException(e);
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PatientId_NotFound (No further patients)" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${PatientInfo_matchNr}&quot; == &quot;0&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Stop Thread If No More Patients" enabled="true">
                  <intProp name="ActionProcessor.action">0</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="No Patients " enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">log.error(&quot;No further patients&quot;)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/register/{PatientId}/present" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}/register/${PatientId}/present</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 10-15s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(10000,15000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-449183188">is attending today’s session.&lt;/p&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/attendances/unregistered/patients/{PatientId}/hpv?return_to=consent" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv?return_to=consent</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VaccinatedStatus Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">VaccinatedStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(Vaccinated)\s+&lt;/h2</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NotVaccinated</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseStatus Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ResponseStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(No response)\s+&lt;/h2&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Responded</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReadyForNurseStatus Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ReadyForNurseStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(Ready for nurse)\s+&lt;/h2</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NotReadyForNurse</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VaccinationPages Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">VaccinationPages</stringProp>
                  <stringProp name="RegexExtractor.regex">data-turbo-action=&quot;replace&quot; href=&quot;/sessions/${SessionId}/patients/${PatientId}/(\w+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">VaccinationPages_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/sessions/${SessionId}/patients/${PatientId}/hpv/consents&quot;&gt;&lt;button class=&quot;nhsuk-button app-button--secondary&quot; data-module=&quot;nhsuk-button&quot; new_tab=&quot;false&quot; type=&quot;submit&quot;&gt;Get consent response&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.*?)&quot; autocomplete=&quot;off&quot; /&gt;&lt;/form&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Vaccinate_Authenticity_Token Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Vaccinate_Authenticity_Token</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;form class=&quot;nhsuk-card&quot; action=&quot;/sessions/\w+/patients/\d+/\w+/vaccinations&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Vaccinate_Authenticity_Token_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If NotVaccinated">
              <stringProp name="IfController.condition">${__jexl3(&quot;${VaccinatedStatus}&quot; == &quot;NotVaccinated&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ResponseStatus">
                <stringProp name="IfController.condition">${__jexl3(&quot;${ResponseStatus}&quot; != &quot;Responded&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">false</boolProp>
              </IfController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Parental Consent">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/patients/{PatientId}/hpv/consents">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv/consents</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/who&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExistingContact Regular Expression Extractor">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ExistingContact</stringProp>
                      <stringProp name="RegexExtractor.regex">value=&quot;(\d+)&quot; name=&quot;draft_consent\[new_or_existing_contact\]&quot; .&gt;&lt;label for=&quot;draft-consent-new-or-existing-contact-\1-field&quot; class=&quot;nhsuk-label nhsuk-radios__label&quot;&gt;([A-z0-9-&amp;#;\s]*?)\s\(\w+\)&lt;/label&gt;&lt;div class=&quot;nhsuk-hint nhsuk-radios__hint&quot; id=&quot;draft-consent-new-or-existing-contact-\1-hint&quot;&gt;([A-z\.@\-_]*?) / ([0-9 ]*?)&lt;/div&gt;&lt;/div&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">ExistingContact_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Parental Details Generator" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">vars.put(&quot;ParentId&quot;,vars.get(&quot;ExistingContact_g1&quot;));
vars.put(&quot;ParentName&quot;,vars.get(&quot;ExistingContact_g2&quot;));
vars.put(&quot;ParentEmail&quot;,vars.get(&quot;ExistingContact_g3&quot;));
vars.put(&quot;ParentPhone&quot;,vars.get(&quot;ExistingContact_g4&quot;));</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/who" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/who</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[new_or_existing_contact]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${ExistingContact}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[new_or_existing_contact]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/parent-details&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/parent-details" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/parent-details</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[parent_email]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${ParentEmail}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[parent_email]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[parent_phone]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${ParentPhone}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[parent_phone]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[parent_phone_receive_updates]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[parent_phone_receive_updates]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/route&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/route" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/route</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[route]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[route]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[route]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">phone</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[route]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/agree&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/agree" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/agree</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[response]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">given</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[response]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/questions&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/questions" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/questions</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_0][notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_0][notes]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_0][response]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">no</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_0][response]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_1][notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_1][notes]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_1][response]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">no</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_1][response]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_2][notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_2][notes]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_2][response]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">no</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_2][response]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_3][notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_3][notes]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_3][response]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">no</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_3][response]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_4][notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_4][notes]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[question_4][response]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">no</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[question_4][response]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/triage&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/triage" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/triage</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[triage_status]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">ready_to_vaccinate</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[triage_status]</stringProp>
                        </elementProp>
                        <elementProp name="draft_consent[triage_notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">1293h1-dsbahdoqsjd12301-qdsaa</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">draft_consent[triage_notes]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/draft-consent/confirm&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;button class=&quot;nhsuk-button&quot; data-module=&quot;nhsuk-button&quot; data-prevent-double-click=&quot;true&quot; new_tab=&quot;false&quot; type=&quot;submit&quot;&gt;Confirm&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;&lt;/form&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/confirm" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-consent/confirm</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1625768713">&lt;p class=&quot;govuk-notification-banner__heading&quot;&gt;Consent recorded for</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/${SessionId}/patients/{PatientId}/hpv?return_to=consent" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv?return_to=consent</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Vaccinate_Authenticity_Token Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Vaccinate_Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form class=&quot;nhsuk-card&quot; action=&quot;/sessions/\w+/patients/\d+/\w+/vaccinations&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Vaccinate_Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ReadyForNurseStatus">
                <stringProp name="IfController.condition">${__jexl3(&quot;${ReadyForNurseStatus}&quot; == &quot;Ready for nurse&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">false</boolProp>
              </IfController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Nurse Triage">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/${SessionId}/patients/{PatientId}/hpv/triages/new" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv/triages/new</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/sessions/\w+/patients/\d+/hpv/triages&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/${SessionId}/patients/{PatientId}/hpv/triages">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv/triages</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                        </elementProp>
                        <elementProp name="triage[status]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">ready_to_vaccinate</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">triage[status]</stringProp>
                        </elementProp>
                        <elementProp name="triage[notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__RandomString(64,ZXCVBNMASDFGHJKLQWERTIOPzxcvbnmasdfghjklqwertyuiop12346890\,./-,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">triage[notes]</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 17-25s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(17000,25000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="135128417">Triage outcome updated</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/${SessionId}/patients/{PatientId}/hpv" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Vaccinate_Authenticity_Token Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Vaccinate_Authenticity_Token</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;form class=&quot;nhsuk-card&quot; action=&quot;/sessions/\w+/patients/\d+/\w+/vaccinations&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Vaccinate_Authenticity_Token_NotFound</stringProp>
                      <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Vaccinate">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/${SessionId}/consents/given/patients/{PatientId}/hpv/vaccinations" enabled="true">
                  <stringProp name="HTTPSampler.port">0</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/hpv/vaccinations</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="authenticity_token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">authenticity_token</stringProp>
                        <stringProp name="Argument.value">${Vaccinate_Authenticity_Token}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[knows_vaccination]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[knows_vaccination]</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[not_already_had]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[not_already_had]</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[feeling_well]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[feeling_well]</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[no_allergies]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[no_allergies]</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[not_pregnant]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[not_pregnant]</stringProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[pre_screening_notes]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[pre_screening_notes]</stringProp>
                        <stringProp name="Argument.value">${__RandomString(64,QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm \,.;1234567890,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[administered]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[administered]</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[delivery_site]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[delivery_site]</stringProp>
                        <stringProp name="Argument.value">right_arm_upper_position</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[delivery_method]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[delivery_method]</stringProp>
                        <stringProp name="Argument.value">intramuscular</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[dose_sequence]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[dose_sequence]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[programme_id]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[programme_id]</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="vaccinate_form[vaccine_id]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">vaccinate_form[vaccine_id]</stringProp>
                        <stringProp name="Argument.value">3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&lt;form action=&quot;/draft-vaccination-record/batch&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                    <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BatchId Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">BatchId</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;input id=&quot;draft-vaccination-record-batch-id-(\d+)-field&quot; class=&quot;nhsuk-radios__input&quot; data-aria-controls=&quot;draft-vaccination-record-batch-id-\1-conditional&quot; type=&quot;radio&quot; value=&quot;\1&quot; name=&quot;draft_vaccination_record\[batch_id\]&quot; /&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">BatchId_NotFound</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 35-48s" enabled="true">
                    <stringProp name="ConstantTimer.delay">${__Random(35000,48000,)}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-676372573">Which batch did you use?</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-vaccination-record/batch" enabled="true">
                  <stringProp name="HTTPSampler.port">0</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">draft-vaccination-record/batch</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_method" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">_method</stringProp>
                        <stringProp name="Argument.value">put</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="draft_vaccination_record[batch_id]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">draft_vaccination_record[batch_id]</stringProp>
                        <stringProp name="Argument.value">${BatchId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="authenticity_token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">authenticity_token</stringProp>
                        <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&lt;form action=&quot;/draft-vaccination-record/confirm&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                    <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 5-8s" enabled="true">
                    <stringProp name="ConstantTimer.delay">${__Random(5000,8000,)}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                    <boolProp name="displayJMeterProperties">false</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySamplerProperties">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1261585857">Check and confirm</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-vaccination-record/confirm" enabled="true">
                  <stringProp name="HTTPSampler.port">0</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">draft-vaccination-record/confirm</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_method" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">_method</stringProp>
                        <stringProp name="Argument.value">put</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="draft_vaccination_record[notes]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">draft_vaccination_record[notes]</stringProp>
                        <stringProp name="Argument.value">${__RandomString(64,QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm \,.;1234567890,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="authenticity_token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">authenticity_token</stringProp>
                        <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="LogOut_Authenticity_Token Boundary Extractor" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">LogOut_Authenticity_Token</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/logout&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;delete&quot; autocomplete=&quot;off&quot; /&gt;&lt;button class=&quot;app-header__account-button&quot; type=&quot;submit&quot;&gt;Log out&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                    <stringProp name="BoundaryExtractor.default">LogOut_Authenticity_Token_NotFound</stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 35-48s" enabled="true">
                    <stringProp name="ConstantTimer.delay">${__Random(35000,48000,)}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="210190978">Vaccination outcome recorded for</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Vaccinated">
              <stringProp name="IfController.condition">${__jexl3(&quot;${VaccinatedStatus}&quot; == &quot;Vaccinated&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Already Vaccinated" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">1</stringProp>
                <stringProp name="LATENCY">1</stringProp>
                <stringProp name="CONNECT">1</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller">
              <stringProp name="ForeachController.inputVal">VaccinationPages</stringProp>
              <stringProp name="ForeachController.returnVal">VaccinationPage</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">1</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
              <stringProp name="TestPlan.comments">Cycles through whether the patient can take the MENACWY or IPV, if they&apos;re too young they won&apos;t</stringProp>
            </ForeachController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/${SessionId}/patients/{PatientId}/${VaccinationPage}?return_to=consent" enabled="true">
                <stringProp name="HTTPSampler.port">0</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}?return_to=consent</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VaccinatedStatus Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">VaccinatedStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(Vaccinated)\s+&lt;/h2</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NotVaccinated</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseStatus Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ResponseStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(No response)\s+&lt;/h2&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Responded</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReadyForNurseStatus Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ReadyForNurseStatus</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(Ready for nurse)\s+&lt;/h2</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Ready for nurse</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VaccinationPages Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">VaccinationPages</stringProp>
                  <stringProp name="RegexExtractor.regex">data-turbo-action=&quot;replace&quot; href=&quot;/sessions/${SessionId}/patients/${PatientId}/(\w+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">VaccinationPages_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/consents&quot;&gt;&lt;button class=&quot;nhsuk-button app-button--secondary&quot; data-module=&quot;nhsuk-button&quot; new_tab=&quot;false&quot; type=&quot;submit&quot;&gt;Get consent response&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.*?)&quot; autocomplete=&quot;off&quot; /&gt;&lt;/form&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If NotVaccinated">
                <stringProp name="IfController.condition">${__jexl3(&quot;${VaccinatedStatus}&quot; == &quot;NotVaccinated&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ResponseStatus">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${ResponseStatus}&quot; != &quot;Responded&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Parental Consent">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/sessions/{SessionId}/patients/{PatientId}/${VaccinationPage}/consents">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/consents</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/who&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExistingContact Regular Expression Extractor">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">ExistingContact</stringProp>
                        <stringProp name="RegexExtractor.regex">value=&quot;(\d+)&quot; name=&quot;draft_consent\[new_or_existing_contact\]&quot; .&gt;&lt;label for=&quot;draft-consent-new-or-existing-contact-\1-field&quot; class=&quot;nhsuk-label nhsuk-radios__label&quot;&gt;([A-z0-9-&amp;#;\s]*?)\s\(\w+\)&lt;/label&gt;&lt;div class=&quot;nhsuk-hint nhsuk-radios__hint&quot; id=&quot;draft-consent-new-or-existing-contact-\1-hint&quot;&gt;([A-z\.@\-_]*?) / ([0-9 ]*?)&lt;/div&gt;&lt;/div&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">ExistingContact_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Parental Details Generator">
                        <stringProp name="scriptLanguage">groovy</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="script">vars.put(&quot;ParentId&quot;,vars.get(&quot;ExistingContact_g1&quot;));
vars.put(&quot;ParentName&quot;,vars.get(&quot;ExistingContact_g2&quot;));
vars.put(&quot;ParentEmail&quot;,vars.get(&quot;ExistingContact_g3&quot;));
vars.put(&quot;ParentPhone&quot;,vars.get(&quot;ExistingContact_g4&quot;));</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/who">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/who</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[new_or_existing_contact]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${ExistingContact}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[new_or_existing_contact]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/parent-details&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/parent-details" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/parent-details</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[parent_email]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${ParentEmail}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[parent_email]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[parent_phone]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${ParentPhone}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[parent_phone]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[parent_phone_receive_updates]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[parent_phone_receive_updates]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/route&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/route" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/route</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[route]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[route]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[route]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">phone</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[route]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/agree&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/agree" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/agree</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[response]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">given</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[response]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/questions&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/questions" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/questions</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_0][notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_0][notes]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_0][response]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">no</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_0][response]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_1][notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_1][notes]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_1][response]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">no</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_1][response]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_2][notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_2][notes]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_2][response]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">no</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_2][response]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_3][notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_3][notes]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_3][response]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">no</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_3][response]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_4][notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_4][notes]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[question_4][response]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">no</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[question_4][response]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/draft-consent/triage&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/triage" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/triage</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[triage_status]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">ready_to_vaccinate</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[triage_status]</stringProp>
                          </elementProp>
                          <elementProp name="draft_consent[triage_notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${__RandomString(64,ZXCVBNMASDFGHJKLQWERTIOPzxcvbnmasdfghjklqwertyuiop12346890\,./-,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">draft_consent[triage_notes]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/draft-consent/confirm&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;button class=&quot;nhsuk-button&quot; data-module=&quot;nhsuk-button&quot; data-prevent-double-click=&quot;true&quot; new_tab=&quot;false&quot; type=&quot;submit&quot;&gt;Confirm&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;&lt;/form&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-consent/confirm" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">draft-consent/confirm</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">put</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1625768713">&lt;p class=&quot;govuk-notification-banner__heading&quot;&gt;Consent recorded for</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/${SessionId}/patients/{PatientId}/${VaccinationPage}?return_to=consent" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}?return_to=consent</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VaccinatedStatus Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">VaccinatedStatus</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(Vaccinated)\s+&lt;/h2</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NotVaccinated</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseStatus Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">ResponseStatus</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(No response)\s+&lt;/h2&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Responded</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReadyForNurseStatus Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">ReadyForNurseStatus</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;h2 class=&quot;nhsuk-card__heading nhsuk-heading-s nhsuk-card__heading--feature&quot;&gt;\s+(Ready for nurse)\s+&lt;/h2</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Not Ready for nurse</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VaccinationPages Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">VaccinationPages</stringProp>
                        <stringProp name="RegexExtractor.regex">data-turbo-action=&quot;replace&quot; href=&quot;/sessions/${SessionId}/patients/${PatientId}/(\w+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">VaccinationPages_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/consents&quot;&gt;&lt;button class=&quot;nhsuk-button app-button--secondary&quot; data-module=&quot;nhsuk-button&quot; new_tab=&quot;false&quot; type=&quot;submit&quot;&gt;Get consent response&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.*?)&quot; autocomplete=&quot;off&quot; /&gt;&lt;/form&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Vaccinate_Authenticity_Token Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Vaccinate_Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form class=&quot;nhsuk-card&quot; action=&quot;/sessions/\w+/patients/\d+/\w+/vaccinations&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Vaccinate_Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ReadyForNurseStatus">
                  <stringProp name="IfController.condition">${__jexl3(&quot;${ReadyForNurseStatus}&quot; == &quot;Ready for nurse&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Nurse Triage" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/{SessionId}/patients/{PatientId}/${VaccinationPage}/triages/new" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/triages/new</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Authenticity_Token Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form action=&quot;/sessions/\w+/patients/\d+/\w+/triages&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/{SessionId}/patients/{PatientId}/${VaccinationPage}/triages" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/triages</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                          </elementProp>
                          <elementProp name="triage[status]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ready_to_vaccinate</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">triage[status]</stringProp>
                          </elementProp>
                          <elementProp name="triage[notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${__RandomString(64,ZXCVBNMASDFGHJKLQWERTIOPzxcvbnmasdfghjklqwertyuiop12346890\,./-,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">triage[notes]</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 17-25s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(17000,25000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="135128417">Triage outcome updated</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/{SessionId}/patients/{PatientId}/${VaccinationPage}" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 7-13s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(7000,13000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Vaccinate_Authenticity_Token Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">Vaccinate_Authenticity_Token</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;form class=&quot;nhsuk-card&quot; action=&quot;/sessions/\w+/patients/\d+/\w+/vaccinations&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;(.+?)&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">Vaccinate_Authenticity_Token_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Vaccinate" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If MenACWY" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${VaccinationPage}&quot; == &quot;menacwy&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/{SessionId}/patients/{PatientId}/${VaccinationPage}/vaccinations" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/vaccinations</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Vaccinate_Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[knows_vaccination]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[knows_vaccination]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[not_already_had]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[not_already_had]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[feeling_well]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[feeling_well]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[no_allergies]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[no_allergies]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[not_taking_medication]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[not_taking_medication]</stringProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[pre_screening_notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[pre_screening_notes]</stringProp>
                            <stringProp name="Argument.value">${__RandomString(64,QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm \,.;1234567890,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[administered]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[administered]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[delivery_site]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[delivery_site]</stringProp>
                            <stringProp name="Argument.value">right_arm_upper_position</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[delivery_method]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[delivery_method]</stringProp>
                            <stringProp name="Argument.value">intramuscular</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[dose_sequence]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[dose_sequence]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[programme_id]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[programme_id]</stringProp>
                            <stringProp name="Argument.value">4</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[vaccine_id]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[vaccine_id]</stringProp>
                            <stringProp name="Argument.value">13</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
                        <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                        <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="BoundaryExtractor.lboundary">&lt;form action=&quot;/draft-vaccination-record/batch&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                        <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                        <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                      </BoundaryExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BatchId Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">BatchId</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;input id=&quot;draft-vaccination-record-batch-id-(\d+)-field&quot; class=&quot;nhsuk-radios__input&quot; data-aria-controls=&quot;draft-vaccination-record-batch-id-\1-conditional&quot; type=&quot;radio&quot; value=&quot;\1&quot; name=&quot;draft_vaccination_record\[batch_id\]&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">BatchId_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 35-48s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(35000,48000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-676372573">Which batch did you use?</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If IPV" enabled="true">
                    <stringProp name="IfController.condition">${__jexl3(&quot;${VaccinationPage}&quot; == &quot;td_ipv&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sessions/{SessionId}/patients/{PatientId}/${VaccinationPage}/vaccinations" enabled="true">
                      <stringProp name="HTTPSampler.port">0</stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.path">sessions/${SessionId}/patients/${PatientId}/${VaccinationPage}/vaccinations</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="authenticity_token" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">authenticity_token</stringProp>
                            <stringProp name="Argument.value">${Vaccinate_Authenticity_Token}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[knows_vaccination]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[knows_vaccination]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[not_already_had]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[not_already_had]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[feeling_well]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[feeling_well]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[no_allergies]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[no_allergies]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[not_taking_medication]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[not_taking_medication]</stringProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[not_pregnant]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[not_pregnant]</stringProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[pre_screening_notes]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[pre_screening_notes]</stringProp>
                            <stringProp name="Argument.value">${__RandomString(64,QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm \,.;1234567890,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[administered]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[administered]</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[delivery_site]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[delivery_site]</stringProp>
                            <stringProp name="Argument.value">right_arm_upper_position</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[delivery_method]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[delivery_method]</stringProp>
                            <stringProp name="Argument.value">intramuscular</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[dose_sequence]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[dose_sequence]</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[programme_id]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[programme_id]</stringProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="vaccinate_form[vaccine_id]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">vaccinate_form[vaccine_id]</stringProp>
                            <stringProp name="Argument.value">12</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
                        <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                        <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
                        <stringProp name="BoundaryExtractor.lboundary">&lt;form action=&quot;/draft-vaccination-record/batch&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                        <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                        <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
                        <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                        <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                      </BoundaryExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BatchId Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">BatchId</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;input id=&quot;draft-vaccination-record-batch-id-(\d+)-field&quot; class=&quot;nhsuk-radios__input&quot; data-aria-controls=&quot;draft-vaccination-record-batch-id-\1-conditional&quot; type=&quot;radio&quot; value=&quot;\1&quot; name=&quot;draft_vaccination_record\[batch_id\]&quot; /&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">BatchId_NotFound</stringProp>
                        <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 35-48s" enabled="true">
                        <stringProp name="ConstantTimer.delay">${__Random(35000,48000,)}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-676372573">Which batch did you use?</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-vaccination-record/batch" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-vaccination-record/batch</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="draft_vaccination_record[batch_id]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">draft_vaccination_record[batch_id]</stringProp>
                          <stringProp name="Argument.value">${BatchId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Authenticity_Token Boundary Extractor" enabled="true">
                      <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                      <stringProp name="BoundaryExtractor.refname">Authenticity_Token</stringProp>
                      <stringProp name="BoundaryExtractor.lboundary">&lt;form action=&quot;/draft-vaccination-record/confirm&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; autocomplete=&quot;off&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                      <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="BoundaryExtractor.default">Authenticity_Token_NotFound</stringProp>
                      <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                      <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                    </BoundaryExtractor>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 5-8s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(5000,8000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1261585857">Check and confirm</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/draft-vaccination-record/confirm" enabled="true">
                    <stringProp name="HTTPSampler.port">0</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.path">draft-vaccination-record/confirm</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">_method</stringProp>
                          <stringProp name="Argument.value">put</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="draft_vaccination_record[notes]" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">draft_vaccination_record[notes]</stringProp>
                          <stringProp name="Argument.value">${__RandomString(64,QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm \,.;1234567890,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authenticity_token" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">authenticity_token</stringProp>
                          <stringProp name="Argument.value">${Authenticity_Token}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="LogOut_Authenticity_Token Boundary Extractor" enabled="true">
                      <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                      <stringProp name="BoundaryExtractor.refname">LogOut_Authenticity_Token</stringProp>
                      <stringProp name="BoundaryExtractor.lboundary">&lt;form class=&quot;button_to&quot; method=&quot;post&quot; action=&quot;/logout&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;delete&quot; autocomplete=&quot;off&quot; /&gt;&lt;button class=&quot;app-header__account-button&quot; type=&quot;submit&quot;&gt;Log out&lt;/button&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;</stringProp>
                      <stringProp name="BoundaryExtractor.rboundary">&quot; autocomplete=&quot;off&quot; /&gt;</stringProp>
                      <stringProp name="BoundaryExtractor.default">LogOut_Authenticity_Token_NotFound</stringProp>
                      <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                      <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                    </BoundaryExtractor>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 35-48s" enabled="true">
                      <stringProp name="ConstantTimer.delay">${__Random(35000,48000,)}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="210190978">Vaccination outcome recorded for</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Vaccinated" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${VaccinatedStatus}&quot; == &quot;Vaccinated&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Already Vaccinated" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">1</stringProp>
                  <stringProp name="LATENCY">1</stringProp>
                  <stringProp name="CONNECT">1</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logout" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qa.mavistesting.com/logout" enabled="true">
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">logout</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_method</stringProp>
                  <stringProp name="Argument.value">delete</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="authenticity_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">authenticity_token</stringProp>
                  <stringProp name="Argument.value">${LogOut_Authenticity_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time 5-8s" enabled="true">
              <stringProp name="ConstantTimer.delay">${__Random(5000,8000,)}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
