<% content_for :before_main do %>
  <% if @programme %>
    <%= render AppBreadcrumbComponent.new(
          items: [
            { text: t("programmes.index.title"), href: programmes_path },
            { text: @programme.name, href: programme_path(@programme) },
            { text: t("imports.index.title"), href: programme_imports_path(@programme) },
          ],
        ) %>
  <% else %>
    <%= render AppBreadcrumbComponent.new(
          items: [
            { text: t("sessions.index.title"), href: sessions_path },
            { text: @session.location.name, href: session_path(@session) },
          ],
        ) %>
  <% end %>
<% end %>

<%= h1 "Import (#{import.created_at.to_fs(:long)})" %>

<p>
  <%= render AppImportStatusComponent.new(import: import) %>
</p>

<%= render AppCardComponent.new do |card| %>
  <% card.with_heading { "Details" } %>

  <%= govuk_summary_list(
        classes: %w[app-summary-list--no-bottom-border
                    nhsuk-u-margin-bottom-0],
      ) do |summary_list| %>
    <%= summary_list.with_row do |row| %>
      <%= row.with_key { "Imported on" } %>
      <%= row.with_value { import.created_at.to_fs(:long) } %>
    <% end %>

    <%= summary_list.with_row do |row| %>
      <%= row.with_key { "Imported by" } %>
      <%= row.with_value { import.uploaded_by.full_name } %>
    <% end %>

    <% if @programme %>
      <%= summary_list.with_row do |row| %>
        <%= row.with_key { "Programme" } %>
        <%= row.with_value { @programme.name } %>
      <% end %>
    <% end %>

    <%= summary_list.with_row do |row| %>
      <%= row.with_key { "Type" } %>
      <%= row.with_value {
            { "ClassImport" => "Class list",
              "CohortImport" => "Cohort list",
              "ImmunisationImport" => "Immunisation list" }[import.class.name]
          } %>
    <% end %>

    <% if import.exact_duplicate_record_count.present? %>
      <%= summary_list.with_row do |row| %>
        <%= row.with_key { "Omitted records" } %>
        <%= row.with_value {
              import.exact_duplicate_record_count == 1 ?
                "1 previously imported record was omitted" :
                "#{import.exact_duplicate_record_count} previously imported records were omitted"
            } %>
      <% end %>
    <% end %>

    <% if @duplicates.present? %>
      <%= summary_list.with_row do |row| %>
        <%= row.with_key { "Duplicate records" } %>
        <%= row.with_value {
              @duplicates.count == 1 ?
                "1 duplicate record needs review" :
                "#{@duplicates.count} duplicate records need review"
            } %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<% if import.rows_are_invalid? %>
  <%= render AppImportErrorsComponent.new(import.errors) do %>
    <p class="nhsuk-u-reading-width">
      The records cannot be uploaded due to errors in the CSV file.
      When fixing these errors, note that the header does not count as a row.
    </p>

    <%= render AppImportFormatDetailsComponent.new(import:,
                                                   programme: @programme) %>
  <% end %>
<% end %>

<% if import.recorded? %>
  <% if @duplicates.present? %>
    <div class="nhsuk-table__panel-with-heading-tab">
      <h3 class="nhsuk-table__heading-tab">
        <%= pluralize(@duplicates.count,
                      "duplicate record") %>
        <%= @duplicates.count == 1 ?
              "needs" : "need" %> review
      </h3>
      <%= govuk_table(html_attributes: {
                        class: "nhsuk-table-responsive",
                      }) do |table| %>
        <% table.with_head do |head| %>
          <% head.with_row do |row| %>
            <% row.with_cell(text: "Child record") %>
            <% row.with_cell(text: "Issue to review") %>
            <% row.with_cell(text: "Actions") %>
          <% end %>
        <% end %>

        <% table.with_body do |body| %>
          <% @duplicates.each do |record| %>
            <% body.with_row do |row| %>
              <% row.with_cell do %>
                <span class="nhsuk-table-responsive__heading">Child record</span>
                <%= record.respond_to?(:patient) ?
                      record.patient.full_name :
                      record.full_name %>
              <% end %>

              <% row.with_cell do %>
                <span class="nhsuk-table-responsive__heading">
                  Issue to review
                </span>
                A field in a duplicate record does not match a previously uploaded
                record
              <% end %>

              <% row.with_cell do %>
                <span class="nhsuk-table-responsive__heading">Actions</span>
                <%= link_to programme_import_issue_path(
                      # TODO: ClassImports don't have a programme, and
                      # the import issues controller needs a programme.
                      @programme || @session.programmes.first,
                      record,
                      type: record.is_a?(VaccinationRecord) ?
                        "vaccination-record" :
                        "patient",
                    ) do %>
                  Review
                  <span class="nhsuk-u-visually-hidden">
                    <%= record.respond_to?(:patient) ?
                          record.patient.full_name :
                          record.full_name %>
                  </span>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>
    </div>
  <% end %>

  <% if @patients.present? %>
    <%= render AppPatientTableComponent.new(@patients,
                                            count: @pagy.count) %>
  <% end %>

  <% if @vaccination_records.present? %>
    <%= render AppVaccinationRecordTableComponent.new(@vaccination_records,
                                                      count: @pagy.count) %>
  <% end %>

  <%= govuk_pagination(pagy: @pagy) %>
<% end %>
