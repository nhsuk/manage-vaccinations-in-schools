#!/bin/bash

# Function to check and create an analyzer
create_analyzer() {
    analyzer_name=$1
    analyzer_type=$2
    echo "Checking for the existence of the $analyzer_name of type $analyzer_type..."

    if aws accessanalyzer list-analyzers --no-cli-pager --query 'analyzers[?name==`'"$analyzer_name"'` && type==`'"$analyzer_type"'`].name' | grep -q "$analyzer_name"; then
        echo "$analyzer_name of type $analyzer_type already exists."
    else
        echo "Creating $analyzer_name of type $analyzer_type..."
        if aws accessanalyzer create-analyzer --no-cli-pager --analyzer-name "$analyzer_name" --type "$analyzer_type" --region eu-west-2; then
            echo "$analyzer_name of type $analyzer_type created successfully."
        else
            echo "Failed to create $analyzer_name of type $analyzer_type." >&2
            exit 1
        fi
    fi
}

_op_create_unused_access_console_analyzer() {
    # Create or verify Unused Access Analyzer
    create_analyzer "UnusedAccess-ConsoleAnalyzer-eu-west-2" "ACCOUNT_UNUSED_ACCESS"
}

_op_create_external_access_console_analyzer() {
    # Create or verify External Access Analyzer
    create_analyzer "ExternalAccess-ConsoleAnalyzer-eu-west-2" "ACCOUNT"
}

_op_enable_db_delete_protection() {
    # Find the RDS instances and store them in a varibale to be used later
    db_clusters=$(aws rds describe-db-clusters --output yaml | grep -E 'DBClusterIdentifier\W+' | awk '{print $2}')

    # Loop through each instance and enable deletion protection
    for db_cluster in $db_clusters; do
        echo "Enabling deletion protection for cluster $db_cluster"
        aws rds modify-db-cluster \
            --db-cluster-identifier $db_cluster \
            --deletion-protection \
            --apply-immediately \
            --no-cli-pager
    done
}

print_operations() {
    echo "Available operations:"
    declare -F | awk '/_op_/ {sub(/.*_op_/, "  "); print}'
}

while getopts ":h" opt; do
    case ${opt} in
        h )
            echo "Usage: $0 [operation [operation]] ..."
            echo ""
            print_operations
            exit 0
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            exit 1
            ;;
    esac

    echo $0
done

while [[ -n "$1" ]]; do
    if declare -f "_op_$1" > /dev/null; then
        echo "Running operation $1"
        "_op_$1"
    else
        echo "Operation $1 does not exist."
        echo ""
        print_operations
    fi
    shift
done

